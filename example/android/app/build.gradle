def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.water.mx_core_example"
        minSdkVersion 18
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [pkgName: applicationId]
    }

    signingConfigs {
        release {
            def appResourcePath = "$System.env.APP_RESOURCES"
            if (appResourcePath == "null") {
                throw new GradleException("""
尚未設定環境變數 APP_RESOURCES
設置方式 
    1. clone倉庫 https://github.com/i2xc/App-Resources
    2. 並設置環境變數 key = APP_RESOURCES, value = 倉庫路徑
""")
            }

            def gradleProperties = new Properties()
            def gradlePropertiesFile = rootProject.file('key.properties')
            if (gradlePropertiesFile.exists()) {
                gradlePropertiesFile.withReader('UTF-8') { reader ->
                    gradleProperties.load(reader)
                }
            } else {
                throw new GradleException("""
找不到 key.properties
設置方式
    1. 執行 fastlane android update_key
    2. 選擇設置的 key
""")
            }
            def storePath = appResourcePath + gradleProperties['storeFile']
            storeFile file(storePath)
            storePassword gradleProperties['storePassword']
            keyAlias gradleProperties['keyAlias']
            keyPassword gradleProperties['keyPassword']
            println("key file path: ${storeFile}")
            println("key file password: ${storePassword}")
            println("key alias: ${keyAlias}")
            println("key password: ${keyPassword}")
        }
    }

    buildTypes {
        release {
            debuggable false
            shrinkResources false
            minifyEnabled false
            useProguard false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "app"

    productFlavors {
        all { flavor ->
            applicationId "com.xc.appid"
            dimension "app"
            manifestPlaceholders = [pkgName: applicationId]
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
