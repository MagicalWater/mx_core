import 'dart:convert';

/// 使用腳本自動產生轉換Bean
class BeanConverter {

  /// 轉化 [jsonString] 為 Bean
  /// <p>[onError] - 當轉化出現錯誤時呼叫</p>
  /// <p>[onError] 的 Function 參數可帶入以下兩種</p>
  /// - Function(dynamic, Stacktrace) => 第一個參數為發生的錯誤, 第二個參數為 StackTrace
  /// - Function(dynamic)
  /// - 當 onError 返回 T 類型時, 將以此值回傳, 否則回傳 null
  /// - 若 onError 不處理或需要再拋出錯誤, 再 onError 裡面直接 throw 即可
  static T? convert<T>(
    String jsonString, {
    Function? onError,
  }) {
    return _convert(
      jsonString,
      onError: onError,
    );
  }

  static T? _convert<T>(
    String jsonString, {
    Function? onError,
  }) {
    var jsonConvert;
    try {
      jsonConvert = jsonDecode(jsonString);
    } catch (error, stack) {
      print("BeanConverter 錯誤[json解析] - $jsonString");
      return handleError<T>(onError, error, stack);
    }

    T? bean;

    /// 首先反序列化
    try {
      final convertFunc = _factories[T];
      if (convertFunc != null) {
        bean = convertFunc(jsonConvert);
      }
    } catch (error, stack) {
      print("BeanConverter 錯誤[反序列化 - $T] - $jsonString");
      return handleError<T>(onError, error, stack);
    }

    /// 檢查反序列化後的結果, 若為 null 必定為尚未實現對應類別, 因為是使用 factory 初始化
    if (bean == null) {
      print("BeanConverter 錯誤[null] - auto bean 尚未實現對應類別");
      return handleError<T>(onError, NullThrownError(), StackTrace.current);
    }

    return bean;
  }

  /// 發生錯誤之後跳入此處進行處理
  static T? handleError<T>(
      Function? onError, dynamic error, StackTrace stackTrace) {
    if (onError == null) {
      print("BeanConverter 錯誤: $error");
      throw error;
    } else {
      var errorReturn;
      if (onError is Function(dynamic)) {
        errorReturn = onError(error);
      } else if (onError is Function(dynamic, StackTrace)) {
        errorReturn = onError(error, stackTrace);
      } else {
        print("onError 格式錯誤: ${onError.runtimeType}, 須得是: Function(dyanmic, Stacktrace) 或 Function(dyanmic)");
        throw error;
      }
      if (errorReturn != null && errorReturn is T) {
        return errorReturn;
      }
      return null;
    }
  }

  BeanConverter._();
}

final _factories = <Type, Function>{
};
